-- num
(= a 123)
-- str
(= b "oh hi")
-- bool
(= c T)
-- nil
(= c ?)
-- arr
(= d (# 1 2 3 4 5))
-- map
(= e (~
	"andy" 9
	"jack" 6
))

-- func
(= f (-> (a) [
	(= i 1)
	i
]))

-- access
(print d[1])
(print e["andy"])

-- inc 1 to all
(map d (-> (n) (+ n 1)))

-- loop
(= a 1)
(while (< a 3) (
	(print a)
	(= a (+ a 1))
))

(= test (<> [
	(print "oh hi mark")
]))

-- branch
(cond
	(&& (== a 1) true) (f1)
	(== a 2) (f2)
	(== a 2) (f3)
)

(= len (<lst> [
	(= ty (type lst))
	(cond
		(== ty "arr") [
			(= i 0)
			(while lst[i] [
				(= i (+ i 1))
			])
			i
		]
		(== ty "map") (len (members lst))
		0
	)
]))

(= fib (<n> {
	(cond
		(== n 0) 0
		(== n 1) 1
		(fib (- n 1) (- n 2))
	)
}))

(= fac (<n> {
	(cond
		(== n 1) 1
		(* n (fac (- n 1)))
	)
}))

expr :
	( (expr | block)* )
	| num
	| str
	| bool
	| nil
	| sym

block : [ (expr | block)* ]

